---
interface Props {
	disableHeight?: boolean;
}

const { disableHeight } = Astro.props;
---

<div id="waves-container" class="fixed -z-50 h-lvh w-full"></div>

<section
	class:list={[!disableHeight && "h-[265rem]"]}
	class="relative w-screen max-w-full overflow-hidden"
>
	<slot />
	<div id="fish-container"></div>
	<button
		id="settings-toggle"
		class="text-accent absolute bottom-5 right-5 z-10 text-lg opacity-50 transition-opacity hover:opacity-100"
	>
		settings
	</button>
	<div
		id="settings-content"
		class="absolute bottom-16 right-5 z-10 hidden w-64 space-y-2 rounded-lg border p-3 backdrop-blur-md"
	>
		<div class="flex items-center justify-between gap-3">
			<input
				type="number"
				class="setting w-12 rounded bg-moonlightBase [appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none"
				name="spawn rate"
				autocomplete="off"
				value="1000"
			/>
			<label for="spawn rate">Spawn rate (ms)</label>
		</div>
		<div class="flex items-center justify-between gap-3">
			<input
				type="checkbox"
				class="setting"
				name="ltr only"
				autocomplete="off"
			/>
			<label for="ltr only">LTR only</label>
		</div>
		<div class="flex items-center justify-between gap-3">
			<input
				type="checkbox"
				class="setting"
				name="variable speed"
				autocomplete="off"
				checked
			/>
			<label for="variable speed">Variable speed</label>
		</div>
		<div class="flex items-center justify-between gap-3">
			<input
				type="checkbox"
				class="setting"
				name="crash browser"
				autocomplete="off"
			/>
			<label for="crash browser" class="text-red-400">
				Crash browser
			</label>
		</div>
	</div>
</section>

<script>
	import vert from "./vert.glsl?raw";
	import frag from "./frag.glsl?raw";
	import reglInit from "regl";

	const regl = reglInit("#waves-container");

	let scrollY = -400;

	const drawTriangle = regl({
		vert,
		frag,
		attributes: {
			position: regl.buffer([
				[1, 1],
				[-1, 1],
				[-1, -1],
				[-1, -1],
				[1, -1],
				[1, 1],
			]),
		},
		uniforms: {
			iTime: regl.context("time"),
			iResolution: (props) => [
				props.drawingBufferWidth,
				props.drawingBufferHeight,
			],
			scrollPos: () => (scrollY = lerp(scrollY, window.scrollY, 0.1)),
			scrollHeight: document.body.scrollHeight,
		},
		count: 6,
	});

	regl.frame(() => {
		regl.clear({
			color: [0, 0, 0, 0],
			depth: 1,
		});

		drawTriangle();
	});

	const colors = {
		white: "#FFFFFF",
		blue: "#497EE9",
		cyan: "#5CD8E6",
		pink: "#D56CC3",
	};

	const settingsToggle = document.getElementById("settings-toggle")!;
	const settingsContent = document.getElementById("settings-content")!;
	const settings =
		document.querySelectorAll<HTMLInputElement>("input.setting")!;
	const fishContainer = document.getElementById("fish-container")!;
	let fish: {
		opacity: number;
		ltr: boolean;
		speed: number;
		x: number;
		y: number;
		ref: HTMLSpanElement;
	}[] = [];

	let lastTime = performance.now();
	let interval = performance.now();
	let fishSpawned = 0;

	let spawnTime = 1000;
	let disableRtl = false;
	let variableSpeed = true;
	let crashBrowserProbably = false;

	settingsToggle.addEventListener("click", () => {
		settingsContent.classList.toggle("hidden");
	});

	settings.forEach((setting) => {
		setting.addEventListener("change", () => {
			const name = setting.getAttribute("name")!;

			switch (name) {
				case "spawn rate":
					spawnTime = parseInt(setting.value);
					break;
				case "ltr only":
					disableRtl = Boolean(setting.checked);
					break;
				case "variable speed":
					variableSpeed = Boolean(setting.checked);
					break;
				case "crash browser":
					if (Boolean(setting.checked)) {
						if (window.confirm("are you sure you want this")) {
							crashBrowserProbably = true;
						} else {
							setting.checked = false;
						}
					} else {
						crashBrowserProbably = false;
					}
					break;
			}
		});
	});

	requestAnimationFrame(animate);

	function spawnFish(scrollHeight: number) {
		const span = document.createElement("span");

		const random = Math.random();
		let ltr = disableRtl ? true : Math.random() < 0.5;

		if (random < 0.7) {
			span.textContent = ltr ? "><>" : "<><";
			span.style.color =
				fishSpawned % 10 == 0 ? colors.pink : colors.white;

			fishSpawned += 1;
		} else if (random < 0.85) {
			span.textContent = "~";
			span.style.color = colors.blue;
			ltr = true;
		} else {
			span.textContent = "áµ’";
			span.style.color = colors.cyan;
			ltr = true;
		}

		const x = ltr ? 0 : window.innerWidth;
		const y = randomIntFromInterval(1, scrollHeight);

		Object.assign(span.style, {
			position: "absolute",
			top: `${y}px`,
			left: "0px",
			whiteSpace: "nowrap",
			opacity: "0%",
			pointerEvents: "none",
			fontSize: `${randomIntFromInterval(12, 32)}px`,
			transform: `translateX(${x}px)`,
		});

		fish.push({
			ltr,
			opacity: 0,
			speed: Math.random(),
			x,
			y,
			ref: span,
		});

		fishContainer.appendChild(span);

		interval = performance.now();
	}

	function animate(time: number) {
		const scrollHeight = document.body.scrollHeight;

		if ((time - interval) / spawnTime > 1) {
			spawnFish(scrollHeight);
		}

		if (crashBrowserProbably) {
			for (let i = 0; i < 1000; i++) {
				spawnFish(scrollHeight);
			}
		}

		const elapsed = time - lastTime;
		const windowWidth = window.innerWidth;

		fish = fish.filter((f) => {
			if (f.x < -10 || f.x > windowWidth || f.y > scrollHeight) {
				f.ref.remove();
				return false;
			} else {
				return true;
			}
		});

		for (const f of fish) {
			f.x +=
				0.1 +
				(elapsed / 10) *
					(variableSpeed ? f.speed : 1) *
					(f.ltr ? 1 : -1);

			f.ref.style.transform = `translateX(${f.x}px)`;

			f.opacity = f.opacity + (elapsed / windowWidth) * 100;

			if (f.opacity < 100) {
				f.ref.style.opacity = `${f.opacity}%`;
			}
		}

		lastTime = time;
		requestAnimationFrame(animate);
	}

	function randomIntFromInterval(min: number, max: number) {
		return Math.floor(Math.random() * (max - min + 1) + min);
	}

	function lerp(start: number, end: number, amount: number) {
		return (1 - amount) * start + amount * end;
	}
</script>
