---
interface Props {
	url: string;
}

import { getPlaylist } from "./scrape";

const [playlist, items] = await getPlaylist(Astro.props.url);
---

<spotify-playlist>
	<section class="relative overflow-hidden rounded-lg border">
		<div
			style=`background: linear-gradient(200deg, ${playlist.color}, 70%, transparent)`
			class="flex items-center justify-between overflow-hidden border-b p-4"
		>
			<div>
				<h1 class="text-xl font-semibold">{playlist.name}</h1>
				<a
					class="text-sm text-green-300/65"
					href={`https://open.spotify.com/playlist/${playlist.id}`}
				>
					open in spotify
				</a>
			</div>
			<img
				class="h-36 w-36 rounded-lg shadow-lg"
				src={playlist.thumbnailUrl}
				alt="playlist thumbnail"
			/>
		</div>
		<div class="max-h-96 divide-y overflow-y-scroll">
			{
				items.map((track, i) => (
					<div
						class="playlist-item flex w-full items-center justify-between gap-4 p-4"
						data-info={JSON.stringify(track)}
					>
						{track.audioPreview && (
							<button>
								<img width="32" height="32" src="/play.svg" />
							</button>
						)}
						<div class="w-full">
							<h1>{track.title}</h1>
							<h2 class="text-sm text-moonlightText">
								{track.artist}
							</h2>
						</div>
						<h1 class="text-moonlightText">{i + 1}</h1>
					</div>
				))
			}
		</div>
		<div
			id="nowPlaying"
			class="absolute bottom-0 flex w-full translate-y-full items-center justify-between gap-4 bg-moonlightIndigo p-4"
		>
			<div class="min-w-0 flex-1 whitespace-nowrap">
				<h1
					id="title"
					class="overflow-hidden text-ellipsis text-sm font-medium"
				>
				</h1>
				<h2 id="artist" class="overflow-hidden text-ellipsis text-xs">
				</h2>
			</div>
			<div class="flex gap-4">
				<button id="pause-play">
					<img width="32" height="32" src="/pause.svg" />
				</button>
				<!-- <button id="next">
					<img width="32" height="32" src="/skip.svg" />
				</button> -->
			</div>
		</div>
	</section>
</spotify-playlist>

<script>
	type PlaylistItem = {
		id: string;
		playlistId: string;
		title: string;
		artist: string;
		audioPreview: string | null;
	};

	class SpotifyPlaylist extends HTMLElement {
		constructor() {
			super();
		}

		connectedCallback() {
			const audio = new Audio();
			const nowPlaying = this.querySelector("#nowPlaying")!;

			let open = false;

			const pausePlayToggle: HTMLButtonElement =
				this.querySelector("#pause-play")!;

			pausePlayToggle.addEventListener("click", () => {
				if (audio.paused) {
					audio.play();
					pausePlayToggle.querySelector("img")!.src = "/pause.svg";
				} else {
					audio.pause();
					pausePlayToggle.querySelector("img")!.src =
						"/dark-play.svg";
				}
			});

			audio.addEventListener("ended", () => {
				pausePlayToggle.querySelector("img")!.src = "/dark-play.svg";
			});

			function playAudio(info: PlaylistItem) {
				audio.src = info.audioPreview!;
				audio.load();
				audio.play();

				nowPlaying.querySelector("#title")!.textContent = info.title;
				nowPlaying.querySelector("#artist")!.textContent = info.artist;
				pausePlayToggle.querySelector("img")!.src = "/pause.svg";

				if (!open) {
					nowPlaying.animate([{ transform: "translateY(0%)" }], {
						duration: 600,
						fill: "forwards",
						easing: "cubic-bezier(0.33, 1, 0.68, 1)",
					});
					open = true;
				}
			}

			const playlistItems: NodeListOf<HTMLDivElement> =
				this.querySelectorAll(".playlist-item");

			playlistItems.forEach((item) => {
				const info: PlaylistItem = JSON.parse(item.dataset.info!);
				const playButton = item.querySelector("button");

				if (playButton) {
					playButton.addEventListener("click", () => playAudio(info));
				}
			});
		}
	}

	customElements.define("spotify-playlist", SpotifyPlaylist);
</script>
