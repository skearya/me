---
import Layout from "../layouts/Layout.astro";
import Ocean from "../components/ocean/Ocean.astro";
import { stack, projects } from "../projects.json";
import Star from "../icons/Star.astro";
import RightArrow from "../icons/RightArrow.astro";
import Close from "../icons/Close.astro";
import { render } from "astro:content";
import { getCollection } from "astro:content";
import GitHub from "../icons/GitHub.astro";

const entries = Object.entries(projects)
	.map(([year, projects]) => [parseInt(year), projects] as const)
	.sort(([a], [b]) => b - a) as Array<
	[
		year: number,
		Array<{
			name: string;
			description: string;
			stack: Array<keyof typeof stack>;
			repo?: string;
			url?: string;
		}>,
	]
>;

const projectsCollection = await getCollection("projects");

const readmes = await Promise.all(
	projectsCollection.map(async (project) => ({
		...project,
		id: project.id.replaceAll(".", ""),
		md: await render(project),
	}))
);

const scriptData = JSON.stringify(
	Object.fromEntries(
		entries.flatMap(([year, projects]) =>
			projects.map(({ name, repo, url }) => [
				name.replaceAll(".", ""),
				{
					name,
					repo,
					url,
					year,
				},
			])
		)
	)
);
---

<Layout title="skeary's portfolio" disableNav>
	<Ocean
		lockedHeight
		oceanClass="background-transition-options"
		wavesClass="background-transition-options"
	>
		<div
			class="appear relative mx-auto mt-20 flex w-full items-center justify-between p-6 font-mono md:max-w-lg"
		>
			<div class="flex flex-col justify-start gap-[2px]">
				<h1 class="whitespace-nowrap text-xl">hi i'm skeary</h1>
				<h1 id="time" class="text-monochromeCat"></h1>
			</div>
			<img
				class="bounce"
				height="125"
				width="125"
				src="/cat.svg"
				alt="cat"
			/>
		</div>
		<div class="mx-auto my-20 w-full max-w-5xl px-4">
			<h1 class="mb-4 text-4xl">projects</h1>
			<p class="text-monochromeCat">
				most of them, including the old ones
			</p>
			<p class="mb-6 text-monochromeCat">more info for each on github</p>
			<div class="grid grid-cols-1 items-stretch gap-3 sm:grid-cols-2">
				{
					entries.map(([year, projects], i) => (
						<>
							<div class="col-span-1 mb-1.5 w-min rounded-sm bg-gradient-to-r from-moonlightIndigo to-moonlightPink px-1 py-0.5 font-mono text-4xl text-moonlightBase sm:col-span-2">
								{year}
							</div>
							{projects.map((project) => (
								<button
									class="project-open-button group flex flex-col overflow-hidden rounded-md border bg-moonlightBase/50 text-left transition-colors hover:border-moonlightPink hover:bg-moonlightBase/85"
									data-id={project.name.replaceAll(".", "")}
								>
									<img
										class="object-cover"
										src={`/projects/${project.name}.png`}
										alt={project.name}
										width="1280px"
										height="720px"
									/>
									<div class="flex h-full w-full flex-col gap-4 p-4">
										<div class="flex h-full justify-between gap-2.5">
											<div>
												<h1>{project.name}</h1>
												<p class="text-sm text-monochromeCat">
													{project.description}
												</p>
											</div>
											<div class="origin-right self-center text-moonlightIndigo transition-transform group-hover:scale-125 group-hover:text-moonlightPink">
												<RightArrow
													width={30}
													height={30}
												/>
											</div>
										</div>
										<hr />
										<div class="flex gap-3">
											{project.stack.map((item) => (
												<a
													class="transition-transform hover:-translate-y-1"
													href={stack[item]}
													target="_blank"
												>
													<img
														src={`/stack/${item}.svg`}
														alt={item}
														title={item}
														height="25px"
														width="25px"
													/>
												</a>
											))}
										</div>
									</div>
								</button>
							))}
							{i !== projects.length && (
								<div class="col-span-1 my-8 flex items-center gap-x-2 sm:col-span-2">
									<Star
										width={25}
										height={25}
										class="animate-spin-slow text-moonlightIndigo"
									/>
									<div class="h-[1px] w-full rounded-full bg-gradient-to-r from-moonlightIndigo to-moonlightPink" />
									<Star
										width={25}
										height={25}
										class="animate-spin-slow text-moonlightPink"
									/>
								</div>
							)}
						</>
					))
				}
			</div>
		</div>
	</Ocean>
	<div
		id="project-info-container"
		class="info-transition-options fixed left-0 top-0 flex h-full w-full translate-y-full items-end justify-center"
		data-projects={scriptData}
	>
		<div
			style="scrollbar-width: thin;"
			class="h-[90%] w-full overflow-hidden border-t bg-moonlightOverlay sm:max-w-xl sm:rounded-t-lg sm:border-x"
		>
			<div class="h-full w-full overflow-y-auto">
				<div
					class="sticky top-0 z-10 flex items-center justify-between bg-gradient-to-b from-moonlightOverlay to-transparent p-3.5 pb-4"
				>
					<div>
						<h1 id="project-info-title" class="text-2xl font-light">
							microwave
						</h1>
						<h2 id="project-info-date" class="text-moonlightText">
							june 2024
						</h2>
					</div>
					<button id="project-info-close">
						<Close
							width={30}
							height={30}
							class="text-moonlightOrange"
						/>
					</button>
				</div>
				<div class="space-y-4 px-3.5">
					<hr />
					<img
						id="project-info-image"
						alt="project showcase image"
						class="rounded-md object-cover"
					/>
					<div class="flex gap-x-2.5">
						<a
							id="project-info-github"
							href="/"
							target="_blank"
							class="flex w-full items-center justify-center gap-x-3 rounded-md bg-moonlightFocusHigh p-3 transition-all hover:brightness-125"
						>
							<GitHub width={25} height={25} />
							<p>github</p>
						</a>
						<a
							id="project-info-url"
							href="/"
							target="_blank"
							class="flex w-full items-center justify-center gap-x-3 rounded-md bg-moonlightIndigo p-3 text-moonlightBase transition-all hover:brightness-125"
						>
							<p>site</p>
							<RightArrow width={25} height={25} />
						</a>
					</div>
					<div
						class="prose prose-invert prose-img:mt-0 prose-img:rounded-md prose-video:mt-0 prose-video:rounded-md [&_lite-youtube]:mb-8"
					>
						{
							readmes.map(({ id, md }) => (
								<div id={`project-${id}`} class="hidden">
									<md.Content />
								</div>
							))
						}
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<style>
	.appear {
		animation: fade-in 1s cubic-bezier(0.45, 0.02, 0.09, 0.98) forwards;
	}

	@keyframes fade-in {
		0% {
			opacity: 0%;
		}
		100% {
			opacity: 100%;
		}
	}

	.bounce {
		animation: bounce 0.4s ease 1s;
	}

	@keyframes bounce {
		75% {
			transform: translateY(-10%);
		}
		100% {
			transform: translateY(0%);
		}
	}

	.info-transition-options {
		will-change: transform;
		transition-property: transform;
		transition-timing-function: cubic-bezier(0.32, 0.72, 0, 1);
		transition-duration: 750ms;
	}

	.info-die {
		transform: translateY(0px);
	}
</style>

<style is:global>
	.background-transition-options {
		transition-property: transform, filter;
		transition-timing-function: cubic-bezier(0.16, 1, 0.3, 1);
		transition-duration: 1250ms;
	}

	.background-die {
		transform: rotate(2deg) scale(0.75);
		filter: saturate(25%);
	}
</style>

<script>
	import { oceanScript } from "../components/ocean/ocean";

	document.getElementById("time")!.textContent =
		new Date().toLocaleString("en-US", {
			timeZone: "America/New_York",
			hour: "numeric",
			minute: "numeric",
			hour12: true,
		}) + " EDT";

	const oceanControls = oceanScript();

	const ocean = document.getElementById("ocean-component")!;
	const waves = document.getElementById("waves-container")!;
	const projectOpeners = document.querySelectorAll<HTMLButtonElement>(
		".project-open-button"
	);
	const projectInfoContainer = document.getElementById(
		"project-info-container"
	)!;
	const projectInfoTitle = document.getElementById("project-info-title")!;
	const projectInfoDate = document.getElementById("project-info-date")!;
	const projectInfoImage = document.getElementById(
		"project-info-image"
	)! as HTMLImageElement;
	const projectInfoGithub = document.getElementById(
		"project-info-github"
	)! as HTMLLinkElement;
	const projectInfoUrl = document.getElementById(
		"project-info-url"
	)! as HTMLLinkElement;
	const projectInfoClose = document.getElementById("project-info-close")!;

	const projectData = JSON.parse(projectInfoContainer.dataset.projects!) as {
		[id: string]: {
			name: string;
			year: number;
			repo?: string;
			url?: string;
		};
	};

	const projectReadmeRefs = Object.fromEntries(
		Object.entries(projectData).map(([id]) => [
			id,
			document.getElementById(`project-${id}`)!,
		])
	);

	projectOpeners.forEach((button) => {
		button.addEventListener("click", (event) => {
			// @ts-expect-error
			if (event.target?.parentElement?.nodeName !== "A") {
				die(button.dataset.id!);
			}
		});
	});

	projectInfoClose.addEventListener("click", () => revive());

	projectInfoContainer.addEventListener("click", (event) => {
		if (event.target === projectInfoContainer) revive();
	});

	document.addEventListener("keydown", (e) => {
		if (e.key === "Escape") revive();
	});

	// weird but i want a way to manage only the visibility of the content i need to
	let state:
		| { open: true; currentReadme: HTMLElement }
		| { open: false; prevReadme?: HTMLElement } = {
		open: false,
	};

	function die(id: string) {
		if (state.open) return;

		oceanControls.stop();

		ocean.classList.add("background-die");
		waves.classList.add("background-die");

		projectInfoContainer.classList.add("info-die");

		state.prevReadme?.classList.add("hidden");

		const currentReadme = projectReadmeRefs[id]!;
		currentReadme.classList.remove("hidden");

		const data = projectData[id]!;

		projectInfoImage.src = `/projects/${data.name}.png`;
		projectInfoTitle.textContent = data.name;
		projectInfoDate.textContent = `${data.year}`;

		if (data.repo) {
			projectInfoGithub.classList.remove("hidden");
			projectInfoGithub.href = data.repo;
		} else {
			projectInfoGithub.classList.add("hidden");
		}

		if (data.url) {
			projectInfoUrl.classList.remove("hidden");
			projectInfoUrl.href = data.url;
		} else {
			projectInfoUrl.classList.add("hidden");
		}

		state = { open: true, currentReadme };
	}

	function revive() {
		if (!state.open) return;

		ocean.classList.remove("background-die");
		waves.classList.remove("background-die");

		projectInfoContainer.classList.remove("info-die");

		oceanControls.resume();

		state = { open: false, prevReadme: state.currentReadme };
	}
</script>
