---
import Layout from "../layouts/Layout.astro";
import Ocean from "../components/ocean/Ocean.astro";
import { stack, projects } from "../components/projects.json";
import Star from "../icons/Star.astro";
import RightArrow from "../icons/RightArrow.astro";

const entries = Object.entries(projects)
	.map(([year, projects]) => [parseInt(year), projects] as const)
	.sort((a, b) => b[0] - a[0]) as Array<
	[
		year: number,
		Array<{
			name: string;
			description: string;
			stack: Array<keyof typeof stack>;
			repo?: string;
			url?: string;
		}>,
	]
>;

import { getEntry } from "astro:content";
import { createDb } from "../db";

const entry = await getEntry("blog", "wordplay-release");

if (entry === undefined) {
	return Astro.redirect("/404");
}

const db = entry.body.includes("db") ? createDb(Astro) : null;

const { Content } = await entry.render();
---

<Layout title="skeary's portfolio" disableNav>
	<Ocean lockedHeight>
		<div
			class="appear relative mx-auto mt-20 flex w-full items-center justify-between p-6 font-mono md:max-w-lg"
		>
			<div class="flex flex-col justify-start gap-[2px]">
				<h1 class="whitespace-nowrap text-xl">hi i'm skeary</h1>
				<h1 id="time" class="text-monochromeCat"></h1>
			</div>
			<img
				class="bounce"
				height="125"
				width="125"
				src="/cat.svg"
				alt="cat"
			/>
		</div>
		<div class="mx-auto my-20 w-full max-w-5xl px-4">
			<h1 class="mb-4 text-4xl">projects</h1>
			<p class="text-monochromeCat">
				most of them, including the old ones
			</p>
			<p class="mb-6 text-monochromeCat">more info for each on github</p>
			<div class="grid grid-cols-1 items-stretch gap-3 sm:grid-cols-2">
				{
					entries.map(([year, projects], i) => (
						<>
							<div class="col-span-1 mb-1.5 w-min rounded-sm bg-gradient-to-r from-moonlightIndigo to-moonlightPink px-1 py-0.5 font-mono text-4xl text-moonlightBase sm:col-span-2">
								{year}
							</div>
							{projects.map((project) => (
								<div class="flex flex-col overflow-hidden rounded-md border">
									<img
										class="object-cover"
										src={`/projects/${project.name}.png`}
										alt={project.name}
										width="1280px"
										height="720px"
									/>
									<div class="flex h-full flex-col gap-4 bg-moonlightBase/50 p-4">
										<div class="flex h-full gap-2.5">
											<div>
												<h1>{project.name}</h1>
												<p class="text-sm text-monochromeCat">
													{project.description}
												</p>
											</div>
											<div class="ml-auto flex flex-shrink-0 items-center gap-2 self-center">
												<button class="epic-button origin-right text-moonlightIndigo">
													<RightArrow
														width={30}
														height={30}
													/>
												</button>
											</div>
										</div>
										<hr />
										<div class="flex gap-3">
											{project.stack.map((item) => (
												<a
													class="transition-transform hover:-translate-y-1"
													href={stack[item]}
													target="_blank"
												>
													<img
														src={`/stack/${item}.svg`}
														alt={item}
														title={item}
														height="25px"
														width="25px"
													/>
												</a>
											))}
										</div>
									</div>
								</div>
							))}
							{i !== projects.length && (
								<div class="col-span-1 my-8 flex items-center gap-x-2 sm:col-span-2">
									<Star
										width={25}
										height={25}
										class="animate-spin-slow text-moonlightIndigo"
									/>
									<div class="h-[1px] w-full rounded-full bg-gradient-to-r from-moonlightIndigo to-moonlightPink" />
									<Star
										width={25}
										height={25}
										class="animate-spin-slow text-moonlightPink"
									/>
								</div>
							)}
						</>
					))
				}
			</div>
		</div>
	</Ocean>
	<div
		id="project-info"
		class="info-transition-options cubic-transition fixed left-0 top-0 flex h-full w-full translate-y-full items-end justify-center"
	>
		<div
			class="h-[90%] max-w-2xl overflow-y-scroll rounded-t-lg border border-b-0 bg-moonlightBase p-5"
		>
			<div class="prose prose-invert">
				<Content {db} />
			</div>
		</div>
	</div>
</Layout>

<style>
	.appear {
		animation: fade-in 1s cubic-bezier(0.45, 0.02, 0.09, 0.98) forwards;
	}

	@keyframes fade-in {
		0% {
			opacity: 0%;
		}
		100% {
			opacity: 100%;
		}
	}

	.bounce {
		animation: bounce 0.4s ease 1s;
	}

	@keyframes bounce {
		75% {
			transform: translateY(-10%);
		}
		100% {
			transform: translateY(0%);
		}
	}

	.info-transition-options {
		will-change: transform;
		transition-property: transform;
		transition-duration: 750ms;
	}

	.info-die {
		@apply translate-y-0;
	}
</style>

<style is:global>
	.cubic-transition {
		transition-timing-function: cubic-bezier(0.32, 0.72, 0, 1);
	}

	.background-transition-other {
		will-change: transform filter;
	}

	.background-transition-options {
		transition-property: transform filter;
		transition-duration: 2000ms;
	}

	.background-die {
		@apply rotate-2 scale-75 saturate-[.25];
	}
</style>

<script>
	import { oceanScript } from "../components/ocean/ocean";

	document.getElementById("time")!.textContent =
		new Date().toLocaleString("en-US", {
			timeZone: "America/New_York",
			hour: "numeric",
			minute: "numeric",
			hour12: true,
		}) + " EDT";

	const oceanControls = oceanScript();

	const ocean = document.getElementById("ocean-component")!;
	const waves = document.getElementById("waves-container")!;
	const projectInfo = document.getElementById("project-info")!;

	// i don't like the window resize transition that happens with bg-transition-options, so it only gets applied when needed
	// background-transition-other is for properties that should always be applied

	ocean.classList.add("cubic-transition", "background-transition-other");
	waves.classList.add("cubic-transition", "background-transition-other");

	ocean.addEventListener("transitionend", () => {
		ocean.classList.remove("background-transition-options");
	});
	waves.addEventListener("transitionend", () => {
		waves.classList.remove("background-transition-options");
	});

	function die() {
		oceanControls.stop();

		ocean.classList.add("background-transition-options");
		waves.classList.add("background-transition-options");

		ocean.classList.add("background-die");
		waves.classList.add("background-die");

		projectInfo.classList.add("info-die");
	}

	function revive() {
		oceanControls.resume();

		ocean.classList.add("background-transition-options");
		waves.classList.add("background-transition-options");

		ocean.classList.remove("background-die");
		waves.classList.remove("background-die");

		projectInfo.classList.remove("info-die");
	}

	document.addEventListener("keydown", (e) => {
		if (e.key === "q") die();
		if (e.key === "w") revive();
	});

	document
		.querySelectorAll<HTMLButtonElement>(".epic-button")
		.forEach((button) => button.addEventListener("click", () => die()));
</script>
